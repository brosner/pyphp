

Unused terminals:


Grammar

Rule 1     statement_list -> statement_list statement
Rule 2     statement_list -> statement
Rule 3     statement -> expr SEMI
Rule 4     statement -> ECHO expr SEMI
Rule 5     expr -> INT
Rule 6     expr -> function_call
Rule 7     expr -> DOLLAR LABEL
Rule 8     expr -> SINGLE_QUOTE SINGLE_QUOTE
Rule 9     expr -> DOUBLE_QUOTE DOUBLE_QUOTE
Rule 10    function_call -> LABEL function_params
Rule 11    function_params -> LPARA RPARA
Rule 12    function_params -> LPARA function_argument_list RPARA
Rule 13    function_argument_list -> function_argument_list COMMA expr
Rule 14    function_argument_list -> expr

Terminals, with rules where they appear

COMMA                : 13
DOLLAR               : 7
DOUBLE_QUOTE         : 9 9
ECHO                 : 4
INT                  : 5
LABEL                : 7 10
LPARA                : 11 12
RPARA                : 11 12
SEMI                 : 3 4
SINGLE_QUOTE         : 8 8
error                : 

Nonterminals, with rules where they appear

expr                 : 3 4 13 14
function_argument_list : 12 13
function_call        : 6
function_params      : 10
statement            : 1 2
statement_list       : 1 0


Parsing method: LALR


state 0

    (0) S' -> . statement_list
    (1) statement_list -> . statement_list statement
    (2) statement_list -> . statement
    (3) statement -> . expr SEMI
    (4) statement -> . ECHO expr SEMI
    (5) expr -> . INT
    (6) expr -> . function_call
    (7) expr -> . DOLLAR LABEL
    (8) expr -> . SINGLE_QUOTE SINGLE_QUOTE
    (9) expr -> . DOUBLE_QUOTE DOUBLE_QUOTE
    (10) function_call -> . LABEL function_params

    ECHO            shift and go to state 6
    INT             shift and go to state 2
    DOLLAR          shift and go to state 4
    SINGLE_QUOTE    shift and go to state 10
    DOUBLE_QUOTE    shift and go to state 1
    LABEL           shift and go to state 9


    statement_list                 shift and go to state 8
    expr                           shift and go to state 3
    function_call                  shift and go to state 5
    statement                      shift and go to state 7

state 1

    (9) expr -> DOUBLE_QUOTE . DOUBLE_QUOTE

    DOUBLE_QUOTE    shift and go to state 11



state 2

    (5) expr -> INT .

    SEMI            reduce using rule 5 (expr -> INT .)
    RPARA           reduce using rule 5 (expr -> INT .)
    COMMA           reduce using rule 5 (expr -> INT .)



state 3

    (3) statement -> expr . SEMI

    SEMI            shift and go to state 12



state 4

    (7) expr -> DOLLAR . LABEL

    LABEL           shift and go to state 13



state 5

    (6) expr -> function_call .

    SEMI            reduce using rule 6 (expr -> function_call .)
    RPARA           reduce using rule 6 (expr -> function_call .)
    COMMA           reduce using rule 6 (expr -> function_call .)



state 6

    (4) statement -> ECHO . expr SEMI
    (5) expr -> . INT
    (6) expr -> . function_call
    (7) expr -> . DOLLAR LABEL
    (8) expr -> . SINGLE_QUOTE SINGLE_QUOTE
    (9) expr -> . DOUBLE_QUOTE DOUBLE_QUOTE
    (10) function_call -> . LABEL function_params

    INT             shift and go to state 2
    DOLLAR          shift and go to state 4
    SINGLE_QUOTE    shift and go to state 10
    DOUBLE_QUOTE    shift and go to state 1
    LABEL           shift and go to state 9


    expr                           shift and go to state 14
    function_call                  shift and go to state 5

state 7

    (2) statement_list -> statement .

    ECHO            reduce using rule 2 (statement_list -> statement .)
    INT             reduce using rule 2 (statement_list -> statement .)
    DOLLAR          reduce using rule 2 (statement_list -> statement .)
    SINGLE_QUOTE    reduce using rule 2 (statement_list -> statement .)
    DOUBLE_QUOTE    reduce using rule 2 (statement_list -> statement .)
    LABEL           reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)



state 8

    (0) S' -> statement_list .
    (1) statement_list -> statement_list . statement
    (3) statement -> . expr SEMI
    (4) statement -> . ECHO expr SEMI
    (5) expr -> . INT
    (6) expr -> . function_call
    (7) expr -> . DOLLAR LABEL
    (8) expr -> . SINGLE_QUOTE SINGLE_QUOTE
    (9) expr -> . DOUBLE_QUOTE DOUBLE_QUOTE
    (10) function_call -> . LABEL function_params

    ECHO            shift and go to state 6
    INT             shift and go to state 2
    DOLLAR          shift and go to state 4
    SINGLE_QUOTE    shift and go to state 10
    DOUBLE_QUOTE    shift and go to state 1
    LABEL           shift and go to state 9


    expr                           shift and go to state 3
    function_call                  shift and go to state 5
    statement                      shift and go to state 15

state 9

    (10) function_call -> LABEL . function_params
    (11) function_params -> . LPARA RPARA
    (12) function_params -> . LPARA function_argument_list RPARA

    LPARA           shift and go to state 16


    function_params                shift and go to state 17

state 10

    (8) expr -> SINGLE_QUOTE . SINGLE_QUOTE

    SINGLE_QUOTE    shift and go to state 18



state 11

    (9) expr -> DOUBLE_QUOTE DOUBLE_QUOTE .

    SEMI            reduce using rule 9 (expr -> DOUBLE_QUOTE DOUBLE_QUOTE .)
    RPARA           reduce using rule 9 (expr -> DOUBLE_QUOTE DOUBLE_QUOTE .)
    COMMA           reduce using rule 9 (expr -> DOUBLE_QUOTE DOUBLE_QUOTE .)



state 12

    (3) statement -> expr SEMI .

    ECHO            reduce using rule 3 (statement -> expr SEMI .)
    INT             reduce using rule 3 (statement -> expr SEMI .)
    DOLLAR          reduce using rule 3 (statement -> expr SEMI .)
    SINGLE_QUOTE    reduce using rule 3 (statement -> expr SEMI .)
    DOUBLE_QUOTE    reduce using rule 3 (statement -> expr SEMI .)
    LABEL           reduce using rule 3 (statement -> expr SEMI .)
    $end            reduce using rule 3 (statement -> expr SEMI .)



state 13

    (7) expr -> DOLLAR LABEL .

    SEMI            reduce using rule 7 (expr -> DOLLAR LABEL .)
    RPARA           reduce using rule 7 (expr -> DOLLAR LABEL .)
    COMMA           reduce using rule 7 (expr -> DOLLAR LABEL .)



state 14

    (4) statement -> ECHO expr . SEMI

    SEMI            shift and go to state 19



state 15

    (1) statement_list -> statement_list statement .

    ECHO            reduce using rule 1 (statement_list -> statement_list statement .)
    INT             reduce using rule 1 (statement_list -> statement_list statement .)
    DOLLAR          reduce using rule 1 (statement_list -> statement_list statement .)
    SINGLE_QUOTE    reduce using rule 1 (statement_list -> statement_list statement .)
    DOUBLE_QUOTE    reduce using rule 1 (statement_list -> statement_list statement .)
    LABEL           reduce using rule 1 (statement_list -> statement_list statement .)
    $end            reduce using rule 1 (statement_list -> statement_list statement .)



state 16

    (11) function_params -> LPARA . RPARA
    (12) function_params -> LPARA . function_argument_list RPARA
    (13) function_argument_list -> . function_argument_list COMMA expr
    (14) function_argument_list -> . expr
    (5) expr -> . INT
    (6) expr -> . function_call
    (7) expr -> . DOLLAR LABEL
    (8) expr -> . SINGLE_QUOTE SINGLE_QUOTE
    (9) expr -> . DOUBLE_QUOTE DOUBLE_QUOTE
    (10) function_call -> . LABEL function_params

    RPARA           shift and go to state 20
    INT             shift and go to state 2
    DOLLAR          shift and go to state 4
    SINGLE_QUOTE    shift and go to state 10
    DOUBLE_QUOTE    shift and go to state 1
    LABEL           shift and go to state 9


    expr                           shift and go to state 21
    function_call                  shift and go to state 5
    function_argument_list         shift and go to state 22

state 17

    (10) function_call -> LABEL function_params .

    SEMI            reduce using rule 10 (function_call -> LABEL function_params .)
    RPARA           reduce using rule 10 (function_call -> LABEL function_params .)
    COMMA           reduce using rule 10 (function_call -> LABEL function_params .)



state 18

    (8) expr -> SINGLE_QUOTE SINGLE_QUOTE .

    SEMI            reduce using rule 8 (expr -> SINGLE_QUOTE SINGLE_QUOTE .)
    RPARA           reduce using rule 8 (expr -> SINGLE_QUOTE SINGLE_QUOTE .)
    COMMA           reduce using rule 8 (expr -> SINGLE_QUOTE SINGLE_QUOTE .)



state 19

    (4) statement -> ECHO expr SEMI .

    ECHO            reduce using rule 4 (statement -> ECHO expr SEMI .)
    INT             reduce using rule 4 (statement -> ECHO expr SEMI .)
    DOLLAR          reduce using rule 4 (statement -> ECHO expr SEMI .)
    SINGLE_QUOTE    reduce using rule 4 (statement -> ECHO expr SEMI .)
    DOUBLE_QUOTE    reduce using rule 4 (statement -> ECHO expr SEMI .)
    LABEL           reduce using rule 4 (statement -> ECHO expr SEMI .)
    $end            reduce using rule 4 (statement -> ECHO expr SEMI .)



state 20

    (11) function_params -> LPARA RPARA .

    SEMI            reduce using rule 11 (function_params -> LPARA RPARA .)
    RPARA           reduce using rule 11 (function_params -> LPARA RPARA .)
    COMMA           reduce using rule 11 (function_params -> LPARA RPARA .)



state 21

    (14) function_argument_list -> expr .

    RPARA           reduce using rule 14 (function_argument_list -> expr .)
    COMMA           reduce using rule 14 (function_argument_list -> expr .)



state 22

    (12) function_params -> LPARA function_argument_list . RPARA
    (13) function_argument_list -> function_argument_list . COMMA expr

    RPARA           shift and go to state 24
    COMMA           shift and go to state 23



state 23

    (13) function_argument_list -> function_argument_list COMMA . expr
    (5) expr -> . INT
    (6) expr -> . function_call
    (7) expr -> . DOLLAR LABEL
    (8) expr -> . SINGLE_QUOTE SINGLE_QUOTE
    (9) expr -> . DOUBLE_QUOTE DOUBLE_QUOTE
    (10) function_call -> . LABEL function_params

    INT             shift and go to state 2
    DOLLAR          shift and go to state 4
    SINGLE_QUOTE    shift and go to state 10
    DOUBLE_QUOTE    shift and go to state 1
    LABEL           shift and go to state 9


    expr                           shift and go to state 25
    function_call                  shift and go to state 5

state 24

    (12) function_params -> LPARA function_argument_list RPARA .

    SEMI            reduce using rule 12 (function_params -> LPARA function_argument_list RPARA .)
    RPARA           reduce using rule 12 (function_params -> LPARA function_argument_list RPARA .)
    COMMA           reduce using rule 12 (function_params -> LPARA function_argument_list RPARA .)



state 25

    (13) function_argument_list -> function_argument_list COMMA expr .

    RPARA           reduce using rule 13 (function_argument_list -> function_argument_list COMMA expr .)
    COMMA           reduce using rule 13 (function_argument_list -> function_argument_list COMMA expr .)


